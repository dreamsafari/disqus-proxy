{"version":3,"sources":["Containers/CommentTree.tsx","Interfaces/Config.tsx","Containers/CommentBox.tsx","Containers/DisqusProxy.tsx","Containers/NetworkWrapper.tsx","serviceWorker.ts","index.tsx"],"names":["CommentTree","props","context","replyToComment","e","arrangedComments","state","replyOnClick","target","getAttribute","pageOnClick","currentPage","setState","bind","comments","this","response","length","i","parent","createCommentElem","commentObj","thisPostID","parentPostID","level","undefined","push","parentCommentObj","id","arrCommentsElem","Row","key","Col","Card","className","size","style","marginLeft","CardHeader","Badge","color","href","author","url","name","aria-hidden","moment","createdAt","format","Button","lineHeight","index","onClick","CardBody","width","height","src","avatar","permalink","alt","dangerouslySetInnerHTML","__html","message","buttonGroup","isFirstPage","isLastPage","Math","floor","disabled","min","ButtonToolbar","ButtonGroup","React","Component","config","window","disqusProxy","server","port","protocol","CommentBox","toggleNewFeature","showNewFeature","componentDidMount","Date","getFullYear","inputOnChange","newState","currentTarget","value","toggleEmojiPicker","showEmojiPicker","toggleModal","pageName","modalType","hideModal","postComment","a","persist","email","thread","replyToCommentObj","regex","error","trim","test","host","join","fetch","method","headers","body","JSON","stringify","author_email","author_name","author_url","then","res","json","code","commentsLoaded","catch","render","cancelOnClick","closeBtn","fontSize","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","placeholder","onChange","Tooltip","placement","isOpen","autohide","toggle","zIndex","set","onSelect","native","Alert","Modal","ModalHeader","close","ModalBody","map","rel","DisqusProxy","identifier","debug","console","log","msg","toggleReplyMode","replyCommentObj","cancelReply","username","NetworkWrapper","disqusLoaded","disqusType","s","document","createElement","async","setAttribute","String","onload","onerror","appendChild","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6b4aba5.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n  Row, Col, Card, CardBody, Badge, CardHeader, Button, ButtonToolbar, ButtonGroup,\r\n} from 'reactstrap';\r\nimport {\r\n  iCommentTreeStates, iCommentTreeProps, iComment,\r\n} from '../Interfaces/Interfaces';\r\n\r\nconst pageLength = 20; /* disqus API will return 100 comments at most */\r\n\r\nclass CommentTree extends React.Component<iCommentTreeProps, iCommentTreeStates> {\r\n  constructor(props: iCommentTreeProps, context: any) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      arrangedComments: [],\r\n      currentPage: 1,\r\n    };\r\n    this.replyToComment = this.replyToComment.bind(this);\r\n    this.pageOnClick = this.pageOnClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { comments } = this.props;\r\n    if (comments && comments.response.length > 0) {\r\n      for (let i = 0; i < comments.response.length; i += 1) {\r\n        if (comments.response[i].parent == null) {\r\n          /* loop for first level comments */\r\n          this.createCommentElem(comments.response[i], i, -1, 0);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  replyToComment = (e: any): void => {\r\n    const { arrangedComments } = this.state;\r\n    const { replyOnClick } = this.props;\r\n    const index = e.target.getAttribute('index');\r\n    const parentPostObj = arrangedComments[index];\r\n    replyOnClick(parentPostObj);\r\n  }\r\n\r\n  pageOnClick = (currentPage: number): void => {\r\n    this.setState({\r\n      currentPage,\r\n    });\r\n  }\r\n\r\n  /* Recursion: get child and add into array */\r\n  createCommentElem(commentObj: iComment, thisPostID: number, parentPostID: number, level: number) {\r\n    const { arrangedComments } = this.state;\r\n    const { comments } = this.props;\r\n\r\n    if (comments !== undefined) {\r\n      arrangedComments.push({\r\n        ...commentObj,\r\n        level,\r\n        parentCommentObj: comments.response[parentPostID],\r\n      });\r\n\r\n      this.setState({ arrangedComments });\r\n\r\n      for (let i = 0; i < comments.response.length; i += 1) {\r\n        if (+comments.response[i].parent === +comments.response[thisPostID].id) {\r\n          this.createCommentElem(comments.response[i], i, thisPostID, level + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render(): JSX.Element[] {\r\n    const { currentPage, arrangedComments } = this.state;\r\n    const arrCommentsElem = [];\r\n\r\n    if (arrangedComments && arrangedComments.length > 0) {\r\n      for (let i = (currentPage - 1) * pageLength; (i < currentPage * pageLength) && (i < arrangedComments.length); i += 1) {\r\n        const commentObj = arrangedComments[i];\r\n        const { parentCommentObj } = commentObj;\r\n        arrCommentsElem.push(\r\n          <Row key={commentObj.id}>\r\n            <Col>\r\n              <Card className=\"mt-2\" size=\"sm\" style={{ marginLeft: `${commentObj.level}rem` }}>\r\n                <CardHeader className=\"p-1\">\r\n                  <Badge color=\"primary\" href={commentObj.author.url}>{commentObj.author.name}</Badge>\r\n                  {\r\n                    (parentCommentObj != null)\r\n                    && [\r\n                      <i className=\"fa fa-angle-right p-1\" aria-hidden=\"true\" key={commentObj.id} />,\r\n                      <Badge color=\"primary\" href={parentCommentObj.author.url}>\r\n                        {parentCommentObj.author.name}\r\n                      </Badge>,\r\n                    ]\r\n                  }\r\n\r\n                  <span className=\"font-weight-bold\" />\r\n                  <span className=\"pl-1\">\r\n                    -\r\n                    {' '}\r\n                    <Badge color=\"secondary\">{moment(commentObj.createdAt).format('YYYY-MM-DD')}</Badge>\r\n                  </span>\r\n                  <span>\r\n                    <Button size=\"sm\" color=\"link\" className=\"float-right\" style={{ lineHeight: 1 }} index={i} onClick={this.replyToComment}>回复</Button>\r\n                  </span>\r\n                </CardHeader>\r\n                <CardBody className=\"p-1\">\r\n                  <Row className=\"m-0\">\r\n                    <div className=\"d-lg-block d-md-block d-none img-fluid\">\r\n                      <img className=\"img-fluid\" width=\"50px\" height=\"50px\" src={commentObj.author.avatar.permalink} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"col\">\r\n                      <div dangerouslySetInnerHTML={{ __html: commentObj.message }} />\r\n                    </div>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>,\r\n        );\r\n      }\r\n      const buttonGroup = [];\r\n\r\n      if (arrangedComments.length > pageLength) {\r\n        const isFirstPage = !!(currentPage === 1);\r\n        const isLastPage = !!(currentPage === (Math.floor(arrangedComments.length / pageLength) + 1));\r\n\r\n        buttonGroup.push(<Button size=\"sm\" color=\"toolbar\" key=\"0\" disabled={isFirstPage} onClick={(): void => this.pageOnClick(currentPage - 1)}>{'<'}</Button>);\r\n        for (let i = 1; i <= (arrangedComments.length / pageLength + 1); i += 1) {\r\n          buttonGroup.push(<Button size=\"sm\" key={i} color={(currentPage === i) ? 'primary' : 'toolbar'} onClick={(): void => this.pageOnClick(i)}>{i}</Button>);\r\n        }\r\n        buttonGroup.push(<Button size=\"sm\" color=\"toolbar\" key=\"-1\" disabled={isLastPage} onClick={(): void => this.pageOnClick(currentPage + 1)}>{'>'}</Button>);\r\n      }\r\n\r\n      arrCommentsElem.push(\r\n        <Row className=\"pt-3\">\r\n          <Col>\r\n            {\r\n              (arrangedComments.length <= pageLength)\r\n              && (\r\n                <span className=\"pl-1\">\r\n                  总计\r\n                  {' '}\r\n                  {arrangedComments.length}\r\n                  {' '}\r\n                  条评论,\r\n                </span>\r\n              )\r\n            }\r\n            {\r\n              (arrangedComments.length > pageLength)\r\n              && (\r\n                <span className=\"pl-1\">\r\n                  总计\r\n                  {' '}\r\n                  {arrangedComments.length}\r\n                  {' '}\r\n                  条评论, 显示\r\n                  {' '}\r\n                  {(currentPage - 1) * pageLength + 1}\r\n                  {' '}\r\n                  -\r\n                  {' '}\r\n                  {Math.min(currentPage * pageLength, arrangedComments.length)}\r\n                  {' '}\r\n                  条评论\r\n                </span>\r\n              )\r\n            }\r\n            <span className=\"float-right\">\r\n              <ButtonToolbar>\r\n                <ButtonGroup>\r\n                  {buttonGroup}\r\n                </ButtonGroup>\r\n              </ButtonToolbar>\r\n            </span>\r\n          </Col>\r\n        </Row>,\r\n      );\r\n    } else {\r\n      arrCommentsElem.push(\r\n        <Row>\r\n          <Col>\r\n            这篇文章暂时没有人评论, 欢迎评论。\r\n          </Col>\r\n        </Row>,\r\n      );\r\n    }\r\n\r\n    return arrCommentsElem;\r\n  }\r\n}\r\nexport default CommentTree;\r\n","interface iConfig extends Window {\r\n  disqusProxy: {\r\n    username: string;\r\n    server: string;\r\n    port: undefined | number;\r\n    protocol: string;\r\n    defaultAvatar: string;\r\n    adminAvatar: string;\r\n    identifier: string;\r\n    debug: boolean;\r\n  };\r\n}\r\n\r\ndeclare const window: iConfig;\r\n\r\nexport const config = window;\r\n","import React from 'react';\r\nimport { Picker } from 'emoji-mart';\r\nimport {\r\n  Row, Col, Card, CardBody, Badge, InputGroup, Modal,\r\n  ModalHeader, ModalBody, InputGroupAddon, InputGroupText, Alert, Input, CardHeader, Button, Tooltip,\r\n} from 'reactstrap';\r\nimport { iCommentBoxStates, iCommentBoxProps } from '../Interfaces/Interfaces';\r\nimport { config } from '../Interfaces/Config';\r\nimport 'emoji-mart/css/emoji-mart.css';\r\n\r\nconst { server, port, protocol } = config.disqusProxy;\r\n\r\nexport class CommentBox extends React.Component<iCommentBoxProps, iCommentBoxStates> {\r\n  constructor(props: iCommentBoxProps, context?: any) {\r\n    super(props, context);\r\n    this.state = {\r\n      comments: '',\r\n      commentsLoaded: false,\r\n      name: '',\r\n      email: '',\r\n      url: '',\r\n      message: '',\r\n      error: '',\r\n      modalType: '',\r\n      showEmojiPicker: false,\r\n      showNewFeature: false,\r\n    };\r\n  }\r\n\r\n  toggleNewFeature = (e: any): void => {\r\n    const { showNewFeature } = this.state;\r\n    this.setState({\r\n      showNewFeature: !showNewFeature,\r\n    });\r\n  }\r\n\r\n  componentDidMount = (): void => {\r\n    // show new feature until 2020\r\n    if (new Date().getFullYear() === 2019) {\r\n      this.setState({\r\n        showNewFeature: true,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  inputOnChange = (e: any): void => {\r\n    const newState: any = { ...this.state };\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    newState[target.name] = target.value;\r\n    this.setState(newState);\r\n  }\r\n\r\n  toggleEmojiPicker = (): void => {\r\n    const { showEmojiPicker } = this.state;\r\n\r\n    this.setState({\r\n      showEmojiPicker: !showEmojiPicker,\r\n    });\r\n  }\r\n\r\n  toggleModal = (e: React.MouseEvent<HTMLButtonElement>): void => {\r\n    const pageName: string | null = (e.target as HTMLInputElement).getAttribute('pageName');\r\n    this.setState({\r\n      modalType: (pageName === null) ? '' : pageName,\r\n    });\r\n  }\r\n\r\n  hideModal = (): void => {\r\n    this.setState({\r\n      modalType: '',\r\n    });\r\n  }\r\n\r\n  postComment = async (e: any) => {\r\n    e.persist(); /* keep event from event pool, otherwise we cannot access event after async  */\r\n    e.target.disabled = true;\r\n    const {\r\n      email, name, url, message,\r\n    } = this.state;\r\n    const { thread, replyToCommentObj } = this.props;\r\n\r\n    /* validation */\r\n    const regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\r\n    let error = '';\r\n    if (message.trim().length === 0) {\r\n      error = 'Message is blank';\r\n    } else if (name.length === 0) {\r\n      error = 'Invalid Name';\r\n    } else if (!regex.test(email)) {\r\n      error = 'Invalid Email';\r\n    }\r\n    if (error.length > 0) {\r\n      this.setState({\r\n        error,\r\n      });\r\n      e.target.disabled = false;\r\n      return;\r\n    }\r\n\r\n    const host = [\r\n      (`${protocol}://${server}`),\r\n      (port !== undefined ? (`:${port}`) : ''),\r\n    ].join('');\r\n\r\n    await fetch(`${host}/api/createComment`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n      },\r\n      body: JSON.stringify({\r\n        author_email: email,\r\n        author_name: name,\r\n        author_url: url,\r\n        message,\r\n        thread,\r\n        parent: (replyToCommentObj !== undefined) ? replyToCommentObj.id : null,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (res.code === 0) {\r\n          this.setState({\r\n            comments: '',\r\n            commentsLoaded: false,\r\n            name: '',\r\n            email: '',\r\n            message: '',\r\n            error: '评论成功, 等待审核...',\r\n          });\r\n        } else {\r\n          this.setState({\r\n            error: res.response,\r\n          });\r\n        }\r\n      })\r\n      .catch(() => {\r\n        this.setState({\r\n          error: '啊哈好像出错了, 刷新试试...',\r\n        });\r\n      });\r\n    e.target.disabled = undefined;\r\n  }\r\n\r\n  render = (): JSX.Element => {\r\n    const {\r\n      name, message, email, url, error, modalType, showEmojiPicker, showNewFeature,\r\n    } = this.state;\r\n    const { cancelOnClick, replyToCommentObj } = this.props;\r\n    const closeBtn = <button className=\"close\" onClick={this.hideModal}>&times;</button>;\r\n\r\n    return (\r\n      <Row>\r\n        <Col>\r\n          <Card>\r\n            <CardHeader className=\"card-header d-flex justify-content-between p-1\">\r\n              <div style={{ fontSize: '1rem' }} className=\"mr-auto\">留言板</div>\r\n              <Button color=\"url\" className=\"p-0 mr-1 text-primary\" pageName=\"about\" onClick={this.toggleModal}>关于</Button>\r\n            </CardHeader>\r\n            <CardBody className=\"m-0 p-0\">\r\n              <InputGroup className=\"p-1 pt-2\" size=\"small\">\r\n                {\r\n                  (replyToCommentObj)\r\n                  && (\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText size=\"small\">\r\n                        回复:\r\n                        {' '}\r\n                        {replyToCommentObj.author.name}\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                  )\r\n                }\r\n                <Input type=\"text\" placeholder=\"Name\" className=\"\" value={name} name=\"name\" onChange={this.inputOnChange} />\r\n                <Input type=\"email\" placeholder=\"Email\" className=\"\" value={email} name=\"email\" onChange={this.inputOnChange} />\r\n                <Input type=\"url\" placeholder=\"URL (Optional)\" className=\"\" value={url} name=\"url\" onChange={this.inputOnChange} />\r\n              </InputGroup>\r\n              <Row className=\"m-0 p-0\">\r\n                <Col className=\"d-flex m-0 p-1 border-0\">\r\n                  <textarea className=\"form-control p-2 m-0\" name=\"message\" onChange={this.inputOnChange} value={message} placeholder=\"Message\" />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n            <div className=\"card-footer text-muted m-0 p-0 form-group d-flex flex-row-reverse position-relative\">\r\n\r\n              <span className=\"small text-danger\" />\r\n              {\r\n                (replyToCommentObj)\r\n                && <Button className=\"btn-sm m-1\" onClick={cancelOnClick}>Cancel</Button>\r\n              }\r\n              <Button color=\"primary\" size=\"sm\" className=\"m-1\" onClick={this.postComment}>Post</Button>\r\n              <Button color=\"light\" size=\"sm\" className=\"m-1\" onClick={this.toggleEmojiPicker} id=\"emoji\">\r\n                <i className=\"fa fa-smile-o\" />\r\n              </Button>\r\n              <Tooltip placement=\"top\" isOpen={showNewFeature} autohide target=\"emoji\" toggle={this.toggleNewFeature}>\r\n                New! Try emoji here~\r\n              </Tooltip>\r\n              {\r\n                showEmojiPicker\r\n                && (\r\n                  <span className=\"position-absolute mt-5\" style={{ zIndex: 1000 }}>\r\n                    <Picker\r\n                      set=\"google\"\r\n                      onSelect={(e: any): void => {\r\n                        this.setState({\r\n                          message: message + e.native,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </span>\r\n                )\r\n              }\r\n            </div>\r\n          </Card>\r\n          {\r\n            (error.length > 0)\r\n            && (\r\n              <Alert color=\"danger\" className=\"small p-2\">\r\n                {error}\r\n              </Alert>\r\n            )\r\n          }\r\n          <Modal isOpen={modalType === 'about'} size=\"lg\">\r\n            <ModalHeader close={closeBtn}>Disqus Proxy</ModalHeader>\r\n            <ModalBody>\r\n              <span>Powered By: </span>\r\n              {['React', 'Bootstrap', 'Typescript', 'Koa'].map((e) => <Badge color=\"secondary\" className=\"m-1\">{e}</Badge>)}\r\n              <br />\r\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/szhielelp/disqus-proxy\">Github</a>\r\n              <br />\r\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://szhshp.org/tech/2018/09/16/disqusrebuild2.html\">使用指导</a>\r\n            </ModalBody>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nexport default CommentBox;\r\n","import React from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport CommentTree from './CommentTree';\r\nimport CommentBox from './CommentBox';\r\nimport { iDisqusProxyStates, iComment } from '../Interfaces/Interfaces';\r\nimport { config } from '../Interfaces/Config';\r\n\r\nclass DisqusProxy extends React.Component<{}, iDisqusProxyStates> {\r\n  constructor(props: any, context?: any) {\r\n    super(props, context);\r\n    this.state = {\r\n      comments: undefined,\r\n      commentsLoaded: false,\r\n      replyCommentObj: undefined,\r\n      thread: undefined,\r\n      msg: 'Loading...',\r\n    };\r\n    this.toggleReplyMode = this.toggleReplyMode.bind(this);\r\n    this.cancelReply = this.cancelReply.bind(this);\r\n  }\r\n\r\n  componentDidMount = (): void => {\r\n    const {\r\n      server, port, identifier, protocol, debug,\r\n    } = config.disqusProxy;\r\n    const host = [\r\n      (`${protocol}://${server}`),\r\n      (port !== undefined ? (`:${port}`) : ''),\r\n    ].join('');\r\n\r\n    if (debug) {\r\n      console.log(`Host Name: ${host}`);\r\n    }\r\n    fetch(`${host}/api/getComments?identifier=${identifier}`, {\r\n      method: 'GET',\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => this.setState({\r\n        comments: (res.code === 0) ? res : null,\r\n        commentsLoaded: true,\r\n      }));\r\n\r\n    fetch(`${host}/api/getThreads?identifier=${identifier}`, {\r\n      method: 'GET',\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => this.setState({\r\n        thread: res.response[0].id,\r\n      }))\r\n      .catch(() => this.setState({\r\n        msg: 'Load Failed',\r\n      }));\r\n  }\r\n\r\n  toggleReplyMode = (replyCommentObj: undefined | iComment): void => {\r\n    this.setState({\r\n      replyCommentObj,\r\n    });\r\n  }\r\n\r\n  cancelReply = (): void => {\r\n    this.toggleReplyMode(undefined);\r\n  }\r\n\r\n  render = (): JSX.Element => {\r\n    const {\r\n      thread, replyCommentObj, commentsLoaded, comments, msg,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"p-1\">\r\n        <CommentBox replyToCommentObj={replyCommentObj} cancelOnClick={this.cancelReply} thread={thread} />\r\n        {\r\n          (commentsLoaded === true)\r\n          && <CommentTree comments={comments} replyOnClick={this.toggleReplyMode} />\r\n        }\r\n        {\r\n          (commentsLoaded === false)\r\n          && (\r\n            <Row>\r\n              <Col>{msg}</Col>\r\n            </Row>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisqusProxy;\r\n","import React from 'react';\r\nimport DisqusProxy from './DisqusProxy';\r\nimport { iNetworkWrapperStates } from '../Interfaces/Interfaces';\r\nimport { config } from '../Interfaces/Config';\r\n\r\nconst { username, debug } = config.disqusProxy;\r\n\r\nexport class NetworkWrapper extends React.Component<{}, iNetworkWrapperStates> {\r\n  constructor(props: any, context?: any) {\r\n    super(props, context);\r\n    this.state = {\r\n      disqusLoaded: false,\r\n      disqusType: 'native',\r\n    };\r\n  }\r\n\r\n  componentDidMount = (): void => {\r\n    if (debug) {\r\n      this.setState({\r\n        disqusLoaded: true,\r\n        disqusType: 'proxy',\r\n      });\r\n      return;\r\n    }\r\n    let s = document.createElement('script');\r\n    s.src = `https://${username}.disqus.com/embed.js`\r\n    s.async = true\r\n    s.setAttribute('data-timestamp', String(+new Date()))\r\n    s.onload = () => {\r\n      this.setState({\r\n        disqusLoaded: true,\r\n        disqusType: 'native',\r\n      })\r\n      console.log('Native Disqus.')\r\n    }\r\n    s.onerror = () => {\r\n      this.setState({\r\n        disqusLoaded: true,\r\n        disqusType: 'proxy',\r\n      })\r\n      console.log('Proxy Disqus')\r\n    }\r\n\r\n    document.body.appendChild(s);\r\n  }\r\n\r\n\r\n  render = (): JSX.Element => {\r\n    const { disqusLoaded, disqusType } = this.state;\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        {\r\n          (disqusLoaded === false)\r\n          && (\r\n            <div className=\"m-3\">\r\n              <i className=\"mr-2 fa fa-circle-o-notch fa-spin\" />\r\n              Loading Disqus...\r\n            </div>\r\n          )\r\n        }\r\n        {\r\n          (disqusLoaded === true && disqusType === 'proxy')\r\n          && <DisqusProxy />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NetworkWrapper;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport NetworkWrapper from './Containers/NetworkWrapper';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<NetworkWrapper />, document.getElementById('disqus_thread'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}